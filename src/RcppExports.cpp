// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// votingBanzhaf
NumericVector votingBanzhaf(const NumericVector& weights, const int quota, const IntegerVector& players, const String& denom);
RcppExport SEXP _CoopGame_votingBanzhaf(SEXP weightsSEXP, SEXP quotaSEXP, SEXP playersSEXP, SEXP denomSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const int >::type quota(quotaSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type players(playersSEXP);
    Rcpp::traits::input_parameter< const String& >::type denom(denomSEXP);
    rcpp_result_gen = Rcpp::wrap(votingBanzhaf(weights, quota, players, denom));
    return rcpp_result_gen;
END_RCPP
}
// votingShapley
NumericVector votingShapley(const IntegerVector& weights, const int quota, const IntegerVector& players);
RcppExport SEXP _CoopGame_votingShapley(SEXP weightsSEXP, SEXP quotaSEXP, SEXP playersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const int >::type quota(quotaSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type players(playersSEXP);
    rcpp_result_gen = Rcpp::wrap(votingShapley(weights, quota, players));
    return rcpp_result_gen;
END_RCPP
}
// votingBanzhafTop
NumericVector votingBanzhafTop(const NumericVector& weights, const int quota, const int topN, const String& denom);
RcppExport SEXP _CoopGame_votingBanzhafTop(SEXP weightsSEXP, SEXP quotaSEXP, SEXP topNSEXP, SEXP denomSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const int >::type quota(quotaSEXP);
    Rcpp::traits::input_parameter< const int >::type topN(topNSEXP);
    Rcpp::traits::input_parameter< const String& >::type denom(denomSEXP);
    rcpp_result_gen = Rcpp::wrap(votingBanzhafTop(weights, quota, topN, denom));
    return rcpp_result_gen;
END_RCPP
}
// votingShapleyTop
NumericVector votingShapleyTop(const IntegerVector& weights, const int quota, const int topN);
RcppExport SEXP _CoopGame_votingShapleyTop(SEXP weightsSEXP, SEXP quotaSEXP, SEXP topNSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const int >::type quota(quotaSEXP);
    Rcpp::traits::input_parameter< const int >::type topN(topNSEXP);
    rcpp_result_gen = Rcpp::wrap(votingShapleyTop(weights, quota, topN));
    return rcpp_result_gen;
END_RCPP
}
// votingVal
double votingVal(const IntegerVector& weights, const int quota, const IntegerVector& coal);
RcppExport SEXP _CoopGame_votingVal(SEXP weightsSEXP, SEXP quotaSEXP, SEXP coalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const int >::type quota(quotaSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type coal(coalSEXP);
    rcpp_result_gen = Rcpp::wrap(votingVal(weights, quota, coal));
    return rcpp_result_gen;
END_RCPP
}
// microarrayBanzhaf
NumericVector microarrayBanzhaf(const NumericMatrix& mtx, const IntegerVector& players, const String& denom);
RcppExport SEXP _CoopGame_microarrayBanzhaf(SEXP mtxSEXP, SEXP playersSEXP, SEXP denomSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mtx(mtxSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type players(playersSEXP);
    Rcpp::traits::input_parameter< const String& >::type denom(denomSEXP);
    rcpp_result_gen = Rcpp::wrap(microarrayBanzhaf(mtx, players, denom));
    return rcpp_result_gen;
END_RCPP
}
// microarrayShapley
NumericVector microarrayShapley(const NumericMatrix& mtx, const IntegerVector& players);
RcppExport SEXP _CoopGame_microarrayShapley(SEXP mtxSEXP, SEXP playersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mtx(mtxSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type players(playersSEXP);
    rcpp_result_gen = Rcpp::wrap(microarrayShapley(mtx, players));
    return rcpp_result_gen;
END_RCPP
}
// microarrayValue
double microarrayValue(const NumericMatrix& mtx, const IntegerVector& coal);
RcppExport SEXP _CoopGame_microarrayValue(SEXP mtxSEXP, SEXP coalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mtx(mtxSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type coal(coalSEXP);
    rcpp_result_gen = Rcpp::wrap(microarrayValue(mtx, coal));
    return rcpp_result_gen;
END_RCPP
}
// microarrayStrongestCoalition
NumericVector microarrayStrongestCoalition(const NumericMatrix& mtx, const int size);
RcppExport SEXP _CoopGame_microarrayStrongestCoalition(SEXP mtxSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mtx(mtxSEXP);
    Rcpp::traits::input_parameter< const int >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(microarrayStrongestCoalition(mtx, size));
    return rcpp_result_gen;
END_RCPP
}
// expressionsToFeaturesStd
NumericMatrix expressionsToFeaturesStd(const NumericMatrix& special, const NumericMatrix& control);
RcppExport SEXP _CoopGame_expressionsToFeaturesStd(SEXP specialSEXP, SEXP controlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type special(specialSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type control(controlSEXP);
    rcpp_result_gen = Rcpp::wrap(expressionsToFeaturesStd(special, control));
    return rcpp_result_gen;
END_RCPP
}
// votingMicroarrayBanzhaf
NumericVector votingMicroarrayBanzhaf(const NumericMatrix& special, const NumericMatrix& control, const IntegerVector& players, const String& denom);
RcppExport SEXP _CoopGame_votingMicroarrayBanzhaf(SEXP specialSEXP, SEXP controlSEXP, SEXP playersSEXP, SEXP denomSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type special(specialSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type control(controlSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type players(playersSEXP);
    Rcpp::traits::input_parameter< const String& >::type denom(denomSEXP);
    rcpp_result_gen = Rcpp::wrap(votingMicroarrayBanzhaf(special, control, players, denom));
    return rcpp_result_gen;
END_RCPP
}
// votingMicroarrayBanzhafTop
NumericVector votingMicroarrayBanzhafTop(const NumericMatrix& special, const NumericMatrix& control, int topN, const String& denom);
RcppExport SEXP _CoopGame_votingMicroarrayBanzhafTop(SEXP specialSEXP, SEXP controlSEXP, SEXP topNSEXP, SEXP denomSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type special(specialSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type control(controlSEXP);
    Rcpp::traits::input_parameter< int >::type topN(topNSEXP);
    Rcpp::traits::input_parameter< const String& >::type denom(denomSEXP);
    rcpp_result_gen = Rcpp::wrap(votingMicroarrayBanzhafTop(special, control, topN, denom));
    return rcpp_result_gen;
END_RCPP
}
// votingMicroarrayShapley
NumericVector votingMicroarrayShapley(const NumericMatrix& special, const NumericMatrix& control, const IntegerVector& players);
RcppExport SEXP _CoopGame_votingMicroarrayShapley(SEXP specialSEXP, SEXP controlSEXP, SEXP playersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type special(specialSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type control(controlSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type players(playersSEXP);
    rcpp_result_gen = Rcpp::wrap(votingMicroarrayShapley(special, control, players));
    return rcpp_result_gen;
END_RCPP
}
// votingMicroarrayShapleyTop
NumericVector votingMicroarrayShapleyTop(const NumericMatrix& special, const NumericMatrix& control, int topN);
RcppExport SEXP _CoopGame_votingMicroarrayShapleyTop(SEXP specialSEXP, SEXP controlSEXP, SEXP topNSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type special(specialSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type control(controlSEXP);
    Rcpp::traits::input_parameter< int >::type topN(topNSEXP);
    rcpp_result_gen = Rcpp::wrap(votingMicroarrayShapleyTop(special, control, topN));
    return rcpp_result_gen;
END_RCPP
}
// votingMicroarrayValue
double votingMicroarrayValue(const NumericMatrix& special, const NumericMatrix& control, const IntegerVector& coal);
RcppExport SEXP _CoopGame_votingMicroarrayValue(SEXP specialSEXP, SEXP controlSEXP, SEXP coalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type special(specialSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type control(controlSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type coal(coalSEXP);
    rcpp_result_gen = Rcpp::wrap(votingMicroarrayValue(special, control, coal));
    return rcpp_result_gen;
END_RCPP
}
// votingMicroarrayPredict
bool votingMicroarrayPredict(const NumericMatrix& special, const NumericMatrix& control, const NumericVector& sample);
RcppExport SEXP _CoopGame_votingMicroarrayPredict(SEXP specialSEXP, SEXP controlSEXP, SEXP sampleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type special(specialSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type control(controlSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sample(sampleSEXP);
    rcpp_result_gen = Rcpp::wrap(votingMicroarrayPredict(special, control, sample));
    return rcpp_result_gen;
END_RCPP
}
// sumOfVotingBanzhaf
NumericVector sumOfVotingBanzhaf(const NumericMatrix& weights, const NumericVector& quotas, const IntegerVector& players, const String& denom);
RcppExport SEXP _CoopGame_sumOfVotingBanzhaf(SEXP weightsSEXP, SEXP quotasSEXP, SEXP playersSEXP, SEXP denomSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type quotas(quotasSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type players(playersSEXP);
    Rcpp::traits::input_parameter< const String& >::type denom(denomSEXP);
    rcpp_result_gen = Rcpp::wrap(sumOfVotingBanzhaf(weights, quotas, players, denom));
    return rcpp_result_gen;
END_RCPP
}
// sumOfVotingShapley
NumericVector sumOfVotingShapley(const NumericMatrix& weights, const NumericVector& quotas, const IntegerVector& players);
RcppExport SEXP _CoopGame_sumOfVotingShapley(SEXP weightsSEXP, SEXP quotasSEXP, SEXP playersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type quotas(quotasSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type players(playersSEXP);
    rcpp_result_gen = Rcpp::wrap(sumOfVotingShapley(weights, quotas, players));
    return rcpp_result_gen;
END_RCPP
}
// sumOfVotingBanzhafTop
NumericVector sumOfVotingBanzhafTop(const NumericMatrix& weights, const NumericVector& quotas, const int topN, const String& denom);
RcppExport SEXP _CoopGame_sumOfVotingBanzhafTop(SEXP weightsSEXP, SEXP quotasSEXP, SEXP topNSEXP, SEXP denomSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type quotas(quotasSEXP);
    Rcpp::traits::input_parameter< const int >::type topN(topNSEXP);
    Rcpp::traits::input_parameter< const String& >::type denom(denomSEXP);
    rcpp_result_gen = Rcpp::wrap(sumOfVotingBanzhafTop(weights, quotas, topN, denom));
    return rcpp_result_gen;
END_RCPP
}
// sumOfVotingShapleyTop
NumericVector sumOfVotingShapleyTop(const NumericMatrix& weights, const NumericVector& quotas, const int topN);
RcppExport SEXP _CoopGame_sumOfVotingShapleyTop(SEXP weightsSEXP, SEXP quotasSEXP, SEXP topNSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type quotas(quotasSEXP);
    Rcpp::traits::input_parameter< const int >::type topN(topNSEXP);
    rcpp_result_gen = Rcpp::wrap(sumOfVotingShapleyTop(weights, quotas, topN));
    return rcpp_result_gen;
END_RCPP
}
// sumOfVotingValue
double sumOfVotingValue(const NumericMatrix& weights, const NumericVector& quotas, const IntegerVector& coal);
RcppExport SEXP _CoopGame_sumOfVotingValue(SEXP weightsSEXP, SEXP quotasSEXP, SEXP coalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type quotas(quotasSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type coal(coalSEXP);
    rcpp_result_gen = Rcpp::wrap(sumOfVotingValue(weights, quotas, coal));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CoopGame_votingBanzhaf", (DL_FUNC) &_CoopGame_votingBanzhaf, 4},
    {"_CoopGame_votingShapley", (DL_FUNC) &_CoopGame_votingShapley, 3},
    {"_CoopGame_votingBanzhafTop", (DL_FUNC) &_CoopGame_votingBanzhafTop, 4},
    {"_CoopGame_votingShapleyTop", (DL_FUNC) &_CoopGame_votingShapleyTop, 3},
    {"_CoopGame_votingVal", (DL_FUNC) &_CoopGame_votingVal, 3},
    {"_CoopGame_microarrayBanzhaf", (DL_FUNC) &_CoopGame_microarrayBanzhaf, 3},
    {"_CoopGame_microarrayShapley", (DL_FUNC) &_CoopGame_microarrayShapley, 2},
    {"_CoopGame_microarrayValue", (DL_FUNC) &_CoopGame_microarrayValue, 2},
    {"_CoopGame_microarrayStrongestCoalition", (DL_FUNC) &_CoopGame_microarrayStrongestCoalition, 2},
    {"_CoopGame_expressionsToFeaturesStd", (DL_FUNC) &_CoopGame_expressionsToFeaturesStd, 2},
    {"_CoopGame_votingMicroarrayBanzhaf", (DL_FUNC) &_CoopGame_votingMicroarrayBanzhaf, 4},
    {"_CoopGame_votingMicroarrayBanzhafTop", (DL_FUNC) &_CoopGame_votingMicroarrayBanzhafTop, 4},
    {"_CoopGame_votingMicroarrayShapley", (DL_FUNC) &_CoopGame_votingMicroarrayShapley, 3},
    {"_CoopGame_votingMicroarrayShapleyTop", (DL_FUNC) &_CoopGame_votingMicroarrayShapleyTop, 3},
    {"_CoopGame_votingMicroarrayValue", (DL_FUNC) &_CoopGame_votingMicroarrayValue, 3},
    {"_CoopGame_votingMicroarrayPredict", (DL_FUNC) &_CoopGame_votingMicroarrayPredict, 3},
    {"_CoopGame_sumOfVotingBanzhaf", (DL_FUNC) &_CoopGame_sumOfVotingBanzhaf, 4},
    {"_CoopGame_sumOfVotingShapley", (DL_FUNC) &_CoopGame_sumOfVotingShapley, 3},
    {"_CoopGame_sumOfVotingBanzhafTop", (DL_FUNC) &_CoopGame_sumOfVotingBanzhafTop, 4},
    {"_CoopGame_sumOfVotingShapleyTop", (DL_FUNC) &_CoopGame_sumOfVotingShapleyTop, 3},
    {"_CoopGame_sumOfVotingValue", (DL_FUNC) &_CoopGame_sumOfVotingValue, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_CoopGame(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
