// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// votingBanzhaf
NumericVector votingBanzhaf(const NumericVector& weights, const int quota, const IntegerVector& players, const String& denom);
RcppExport SEXP _VotingGames_votingBanzhaf(SEXP weightsSEXP, SEXP quotaSEXP, SEXP playersSEXP, SEXP denomSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const int >::type quota(quotaSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type players(playersSEXP);
    Rcpp::traits::input_parameter< const String& >::type denom(denomSEXP);
    rcpp_result_gen = Rcpp::wrap(votingBanzhaf(weights, quota, players, denom));
    return rcpp_result_gen;
END_RCPP
}
// votingShapley
NumericVector votingShapley(const IntegerVector& weights, const int quota, const IntegerVector& players);
RcppExport SEXP _VotingGames_votingShapley(SEXP weightsSEXP, SEXP quotaSEXP, SEXP playersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const int >::type quota(quotaSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type players(playersSEXP);
    rcpp_result_gen = Rcpp::wrap(votingShapley(weights, quota, players));
    return rcpp_result_gen;
END_RCPP
}
// votingBanzhafTop
NumericVector votingBanzhafTop(const NumericVector& weights, const int quota, const int topN, const String& denom);
RcppExport SEXP _VotingGames_votingBanzhafTop(SEXP weightsSEXP, SEXP quotaSEXP, SEXP topNSEXP, SEXP denomSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const int >::type quota(quotaSEXP);
    Rcpp::traits::input_parameter< const int >::type topN(topNSEXP);
    Rcpp::traits::input_parameter< const String& >::type denom(denomSEXP);
    rcpp_result_gen = Rcpp::wrap(votingBanzhafTop(weights, quota, topN, denom));
    return rcpp_result_gen;
END_RCPP
}
// votingShapleyTop
NumericVector votingShapleyTop(const IntegerVector& weights, const int quota, const int topN);
RcppExport SEXP _VotingGames_votingShapleyTop(SEXP weightsSEXP, SEXP quotaSEXP, SEXP topNSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const int >::type quota(quotaSEXP);
    Rcpp::traits::input_parameter< const int >::type topN(topNSEXP);
    rcpp_result_gen = Rcpp::wrap(votingShapleyTop(weights, quota, topN));
    return rcpp_result_gen;
END_RCPP
}
// votingVal
double votingVal(const IntegerVector& weights, const int quota, const IntegerVector& coal);
RcppExport SEXP _VotingGames_votingVal(SEXP weightsSEXP, SEXP quotaSEXP, SEXP coalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const int >::type quota(quotaSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type coal(coalSEXP);
    rcpp_result_gen = Rcpp::wrap(votingVal(weights, quota, coal));
    return rcpp_result_gen;
END_RCPP
}
// sumOfVotingBanzhaf
NumericVector sumOfVotingBanzhaf(const NumericMatrix& weights, const NumericVector& quotas, const IntegerVector& players);
RcppExport SEXP _VotingGames_sumOfVotingBanzhaf(SEXP weightsSEXP, SEXP quotasSEXP, SEXP playersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type quotas(quotasSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type players(playersSEXP);
    rcpp_result_gen = Rcpp::wrap(sumOfVotingBanzhaf(weights, quotas, players));
    return rcpp_result_gen;
END_RCPP
}
// sumOfVotingShapley
NumericVector sumOfVotingShapley(const NumericMatrix& weights, const NumericVector& quotas, const IntegerVector& players);
RcppExport SEXP _VotingGames_sumOfVotingShapley(SEXP weightsSEXP, SEXP quotasSEXP, SEXP playersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type quotas(quotasSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type players(playersSEXP);
    rcpp_result_gen = Rcpp::wrap(sumOfVotingShapley(weights, quotas, players));
    return rcpp_result_gen;
END_RCPP
}
// sumOfVotingBanzhafTop
NumericVector sumOfVotingBanzhafTop(const NumericMatrix& weights, const NumericVector& quotas, const int topN);
RcppExport SEXP _VotingGames_sumOfVotingBanzhafTop(SEXP weightsSEXP, SEXP quotasSEXP, SEXP topNSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type quotas(quotasSEXP);
    Rcpp::traits::input_parameter< const int >::type topN(topNSEXP);
    rcpp_result_gen = Rcpp::wrap(sumOfVotingBanzhafTop(weights, quotas, topN));
    return rcpp_result_gen;
END_RCPP
}
// sumOfVotingShapleyTop
NumericVector sumOfVotingShapleyTop(const NumericMatrix& weights, const NumericVector& quotas, const int topN);
RcppExport SEXP _VotingGames_sumOfVotingShapleyTop(SEXP weightsSEXP, SEXP quotasSEXP, SEXP topNSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type quotas(quotasSEXP);
    Rcpp::traits::input_parameter< const int >::type topN(topNSEXP);
    rcpp_result_gen = Rcpp::wrap(sumOfVotingShapleyTop(weights, quotas, topN));
    return rcpp_result_gen;
END_RCPP
}
// sumOfVotingValue
double sumOfVotingValue(const NumericMatrix& weights, const NumericVector& quotas, const IntegerVector& coal);
RcppExport SEXP _VotingGames_sumOfVotingValue(SEXP weightsSEXP, SEXP quotasSEXP, SEXP coalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type quotas(quotasSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type coal(coalSEXP);
    rcpp_result_gen = Rcpp::wrap(sumOfVotingValue(weights, quotas, coal));
    return rcpp_result_gen;
END_RCPP
}
// microarrayBanzhaf
NumericVector microarrayBanzhaf(const NumericMatrix& mtx);
RcppExport SEXP _VotingGames_microarrayBanzhaf(SEXP mtxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mtx(mtxSEXP);
    rcpp_result_gen = Rcpp::wrap(microarrayBanzhaf(mtx));
    return rcpp_result_gen;
END_RCPP
}
// microarrayShapley
NumericVector microarrayShapley(const NumericMatrix& mtx);
RcppExport SEXP _VotingGames_microarrayShapley(SEXP mtxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mtx(mtxSEXP);
    rcpp_result_gen = Rcpp::wrap(microarrayShapley(mtx));
    return rcpp_result_gen;
END_RCPP
}
// microarrayValue
double microarrayValue(const NumericMatrix& mtx, const IntegerVector& coal);
RcppExport SEXP _VotingGames_microarrayValue(SEXP mtxSEXP, SEXP coalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mtx(mtxSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type coal(coalSEXP);
    rcpp_result_gen = Rcpp::wrap(microarrayValue(mtx, coal));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_VotingGames_votingBanzhaf", (DL_FUNC) &_VotingGames_votingBanzhaf, 4},
    {"_VotingGames_votingShapley", (DL_FUNC) &_VotingGames_votingShapley, 3},
    {"_VotingGames_votingBanzhafTop", (DL_FUNC) &_VotingGames_votingBanzhafTop, 4},
    {"_VotingGames_votingShapleyTop", (DL_FUNC) &_VotingGames_votingShapleyTop, 3},
    {"_VotingGames_votingVal", (DL_FUNC) &_VotingGames_votingVal, 3},
    {"_VotingGames_sumOfVotingBanzhaf", (DL_FUNC) &_VotingGames_sumOfVotingBanzhaf, 3},
    {"_VotingGames_sumOfVotingShapley", (DL_FUNC) &_VotingGames_sumOfVotingShapley, 3},
    {"_VotingGames_sumOfVotingBanzhafTop", (DL_FUNC) &_VotingGames_sumOfVotingBanzhafTop, 3},
    {"_VotingGames_sumOfVotingShapleyTop", (DL_FUNC) &_VotingGames_sumOfVotingShapleyTop, 3},
    {"_VotingGames_sumOfVotingValue", (DL_FUNC) &_VotingGames_sumOfVotingValue, 3},
    {"_VotingGames_microarrayBanzhaf", (DL_FUNC) &_VotingGames_microarrayBanzhaf, 1},
    {"_VotingGames_microarrayShapley", (DL_FUNC) &_VotingGames_microarrayShapley, 1},
    {"_VotingGames_microarrayValue", (DL_FUNC) &_VotingGames_microarrayValue, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_VotingGames(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
